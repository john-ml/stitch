quadruple(x int) int:
  y: int = x + x;
  z: int = x * 2;
  y + z

octuple(z int) int:
  z: int = quadruple(x);
  z + z

deref(p *int) int: *p

proj(p {x int, y int}) int: p.x

index(p **int, i int) int: p[i][i]

dup(x int) {l int, r int}:
  {l = x, r = x}

inl(x int) <l int, r int>:
  l@x

inr(x int) <l int, r int>:
  r@x

nested(x int) int:
  y: int = (
    z: int = x + x;
    z := z + 2;
    z
  );
  y + y

main(argc int, argv **char) void:
  print("hello, world\n")

extract(xy <l int, r int>) int:
  res: int =
    case xy
    | l@x -> x
    | r@y -> y
    end;
  res

quadruple(x):
  y = x + x;
  z = x * 2;
  y + z

octuple(z):
  z = quadruple(x);
  z + z

deref(p): *p

proj(p): p.x

index(p, i): p[i][i]

dup(x):
  {l = x, r = x}

inl(x):
  l@x

inr(x):
  r@x

nested(x):
  y = (
    z = x + x;
    z := z + 2;
    z
  );
  y + y

extract(xy):
  res =
    case xy
    | l@x -> x
    | r@y -> y
    end;
  res

extract(xy):
  case xy
  | l@x -> x
  | r@y -> y
  end
