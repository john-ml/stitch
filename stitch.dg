import '/z3'

# atom = int
lit, nab, pp_lit = lit, nab, pp_lit where
  memo = {}
  strs = []
  # lit : string -> atom
  lit = s ->
    if not (s in memo) =>
      memo!!s := len strs
      strs.append s
    memo!!s
  # nab(la) : unit -> fresh atom
  nab = ->
    n = len strs
    strs.append ("'" + str n)
    n
  # pp_lit : atom -> str
  pp_lit = n -> if (n < len strs => strs!!n) (otherwise => "'" + str n)

# fresh unification variable
Var = subclass object where
  __init__ = self ->
    self.a = self # initially a self-loop
    None

# constraint
SMT = subclass object where
  __init__ = self a ->
    self.a = a
    None

# log = mutable list of thunks that will undo destructive updates (aka trail)
# solver = SMT solver
# action = log solver verbose:False -> Gen None
# after the generator returned by action is exhausted log and solver should be fully restored to original states
# run : action -> log, solver, Gen None
run = f ->
  log = []
  solver = z3.Solver!
  g = f log solver
  next g # force at least one success
  log, solver, g

# unify : term term -> action
unify = l r -> log solver verbose:False -> (
  if verbose =>
    print 'vvv' (pp_zonked (zonk l))
    print '^^^' (pp_zonked (zonk r))
  n = len log
  solver.push!
  except
    err =>
      unify_ log solver verbose l r nop nop
      if verbose => print 'OK'
      yield None
    err :: No =>
      undo log n
      solver.pop!
      if verbose => print 'X'
) where
  No = subclass Exception where
  nop = _ -> None
  # set_l x stores x in l's parent location
  #   i.e. pointer graph goes (p -> l) x ==set_l x==> (p -> x) l
  #   l isn't destroyed, but just isolated from the old reference graph
  unify_ = log solver verbose l r set_l set_r ->
    # helpers
    set_var = v -> x ->
      if verbose => print (len log) 'mutating' v ':=' x
      v.a := x
    set_arr = arr i -> x ->
      if verbose => print (len log) 'mutating' arr '!!' i ':=' x
      arr!!i := x
    inst = v e ->
      log.append (-> (set_var v) v)
      (set_var v) e
    cyc = v e set_e ->
      log.append (-> set_e e)
      set_e v
      go v.a e (set_var v) nop
    go = l r set_l set_r -> if
      # simple cases
      l is r => None
      type l is type r is int and l == r => None
      type l is type r is list and len l == len r =>
        for (i, (x, y)) in enumerate (zip l r) =>
          go x y (set_arr l i) (set_arr r i)
      # instantiate variables
      type l is Var and l is l.a => inst l r
      type r is Var and r is r.a => inst r l
      # follow var -> var links (find representative)
      type l is Var is type l.a => go l.a r (set_var l) set_r
      type r is Var is type r.a => go r.a l (set_var r) set_l
      # var ~ non-var with var -> term:
      # - store var in non-var's parent pointer location
      # - check term ~ non-var
      # this allows for unification of cyclic structures
      type l is Var => cyc l r set_r
      type r is Var => cyc r l set_l
      # smt ~ smt: add equality constraint and check sat
      type l is type r is SMT =>
        solver.add (l.a == r.a)
        if solver.check() != z3.sat => raise No
      otherwise => raise No
    go l r set_l set_r

# revert all actions taken from log[n] onwards
undo = log n -> while len log > n => log.pop! !

# add : z3 formula .. -> action
add = *:fs -> log solver verbose:False ->
  if verbose => print 'assert' sep:' /\\ ' *:fs
  solver.add *:fs
  if solver.check! == z3.sat => yield None

# conj : action .. -> action
conj = *:fs -> log solver verbose:False -> go fs where
  go = fs -> if
    len fs == 0 => yield None
    otherwise =>
      f, *fs = fs
      for _ in f log solver verbose:verbose =>
        yield from go fs

# disj : action .. -> action
disj = *:fs -> log solver verbose:False ->
  for f in fs =>
    n = len log
    solver.push!
    yield from f log solver verbose:verbose
    solver.pop!
    undo log n

# expand out non-cyclic uvars
zonk = t verbose:False -> go t where
  done = set!
  go = t -> if
    type t is int => pp_lit t
    type t is Var and t in done => hex (id t)
    type t is Var =>
      done.add t
      if (verbose => (hex (id t), go t.a)) (otherwise => go t.a)
    type t is list => list (map go t)
    type t is SMT => str t.a
    otherwise => raise ValueError ("Can't zonk " + str(t))

pp_zonked = t -> if
  type t is str => t
  otherwise => '[' + ' '.join(map pp_zonked t) + ']'

parse = s ->
  import '/lark'
  grammar = lark.Lark('''
  %import common.WS
  %ignore WS
  %ignore COMMENT
  start: (fact | query)*
  fact: term ("<==" _rhs)? "."
  query: _rhs "?"
  _rhs: rhs_dis
  ?rhs_dis: rhs_con | rhs_dis ";" rhs_con
  ?rhs_con: _rhs_atom | rhs_con "," _rhs_atom
  _rhs_atom: term | "(" _rhs ")"

  term: _atom | term _atom
  _atom: LIT | VAR | smt | "(" term ")"

  smt: "{" (smt_form | smt_rel) "}"
  ?smt_form: smt_or | smt_form "->" smt_or
  ?smt_or: smt_and | smt_or "\\\\/" smt_and
  ?smt_and: smt_rel | smt_and "/\\\\" smt_rel
  ?smt_rel: smt_sum | smt_sum REL smt_sum | "(" smt_form ")" | NOT smt_rel
  ?smt_sum: smt_prod | smt_sum ADD smt_prod
  ?smt_prod: _smt_atom | smt_prod MUL _smt_atom
  _smt_atom: VAR | "(" smt_rel ")"

  NOT: "~"
  REL: "=" | "/=" | "<" | ">" | "<=" | ">="
  ADD: "+" | "-"
  MUL: "*" | "/"

  LIT: /(?!<==)[^-(){},;.?A-Z\\s][^(){},;.?\\s]*/
  VAR: /[A-Z][a-zA-Z0-9_'-]*/ | "_"

  COMMENT: /--[^\\n]+/
  ''')
  translate = children -> tuple (map go children) where
    go = child -> if
      not (type child is lark.lexer.Token) => child
      child.type == 'LIT' => lit child.value
      otherwise => child.value
  uninfix = xs -> xs!!1, xs!!0, xs!!2
  Translate = subclass lark.Transformer where
    start = self statements ->
      facts = []
      queries = []
      for (ty, terms) in statements =>
        (if (ty == 'fact' => facts) (otherwise => queries)).append terms
      'program', facts, queries
    fact = self terms -> 'fact', terms
    query = self terms -> 'query', terms
    term = self children -> if
      len children == 1 => translate children !! 0
      otherwise => translate children
    smt = self children -> 'smt', translate children !! 0
    smt_form = self children -> ('implies',) + translate children
    smt_or = self children -> ('or',) + translate children
    smt_and = self children -> ('and',) + translate children
    smt_sum = self children -> uninfix (translate children)
    smt_prod = self children -> uninfix (translate children)
    smt_rel = self children -> if
      len children == 3 => uninfix (translate children)
      otherwise => 'not', translate children !! 1
    rhs_con = self children -> ('con',) + translate children
    rhs_dis = self children -> ('dis',) + translate children
  Translate!.transform (grammar.parse s)

# a term' is a function that is waiting for an environment to fill in metavariables
# term' = (Dict str term) -> term
# den_term : ast_term -> term'
den_term = t -> env -> if
  type t is str => env!!t
  type t is int => t
  type t is tuple => list (map (s -> (den_term s) env) t)
  otherwise => raise ValueError ('Bad term: ' + str t)

# an action' is an action waiting for metas + recursive callback
# action' = program (Dict str term) -> action
# den_clause : ast_clause -> action'
den_clause = (clause = hd, *tl) -> go env -> if
  hd == 'con' => conj *:(map (c -> (den_clause c) go env) tl)
  hd == 'dis' => disj *:(map (c -> (den_clause c) go env) tl)
  hd == 'smt' => raise NotImplementedError
  otherwise => go (list (map (c -> (den_term c) env) clause))

# ast_fact = [ast_clause] where the first element is ast_term
# fact_vars : ast_fact -> Set str
fact_vars = terms -> collect clause_vars terms where
  collect = f xs -> foldl (|) (set []) (map f xs)
  clause_vars = t -> if
    type t is str => set [t]
    type t is int => set []
    type t is tuple =>
      hd, *tl = t
      if hd == 'con' or hd == 'dis' => collect clause_vars tl
         otherwise => collect clause_vars t
    otherwise => raise ValueError ('Bad AST clause: ' + str t)

# nablas : Set str -> Dict str (fresh Var)
nablas = dict <- bind map (v -> v, Var!)

# fact_env : ast_fact -> Dict str Var
fact_env = nablas <- fact_vars

# a program' is a program that is waiting for a program to fill out 'recursive calls'
# program' = program -> program
# den_fact : ast_fact -> program'
den_fact = (fact = term, *terms) -> go -> t ->
  env = fact_env fact
  goal = (den_term term) env
  conj (unify t goal) *:(map (c -> (den_clause c) go env) terms)

# lift disjunction to program'
# disj_p : Gen program' -> program'
disj_p = ps -> go -> t -> disj *:(map (p -> (p go) t) ps)

# den_facts : [ast_fact] -> program'
den_facts = facts -> disj_p (map den_fact facts)

# lift disjunction to program'
# conj_a : Gen program' -> program'
conj_a = as -> go env -> conj *:(map (a -> a go env) as)

# ast_query = [ast_clause]
# den_query : ast_query -> action'
den_query = cs -> conj_a (map den_clause cs)

# query_vars : ast_query -> Set str
query_vars = fact_vars

# query_env : ast_query -> Dict str Var
query_env = fact_env

# ast_program = str * [ast_fact] * [ast_query]
# den_program : ast_program -> Gen (Dict str Var * action)
den_program = (_, facts, queries) ->
  go = t -> log solver verbose:False ->
    (((den_facts facts) go) t) log solver verbose:verbose
  map (q -> (env = query_env q), (den_query q) go env) queries

# label : str action -> action
label = s a -> log solver verbose:False ->
  if verbose => print (len log) '-->' s!
  yield from a log solver verbose:verbose
  if verbose => print (len log) '<--' s!

# evaluate : ast_program verbose:False -> None
evaluate = p verbose:False ->
  for (xs, action) in den_program p =>
    log = []
    solver = z3.Solver!
    for _ in action log solver verbose:verbose =>
      for (name, x) in xs.items! =>
        print name ':=' (pp_zonked (zonk x))

# interpret : str -> None
interpret = evaluate <- parse

# program = term -> action
# trace : program -> program
trace = f -> t ->
  print (zonk t)
  f t

arr = *:ts ->
  res, *ts = ts
  while ts != [] =>
    h, *ts = ts
    res = [res, h]
  res

# make sure only 1 result is produced when there is only one result
test_exhaustive = ->
  # z = z
  # (s N) = (s P) <== N = P.
  eq = lit '='
  plus = lit '+'
  z = lit 'z'
  s = n -> arr (lit 's') n
  n0 = Var!
  go = t -> log solver verbose:False ->
    base = label (-> 'disj 1 ' + pp_zonked (zonk t) + ' ' + pp_zonked (zonk n0)) (unify t (arr z eq z))
    ind = label (-> 'disj 2' + pp_zonked (zonk t) + ' ' + pp_zonked (zonk n0)) (
      label (-> 'conj') (conj
        (label (-> 'conj 1' + pp_zonked (zonk t) + ' ' + pp_zonked (zonk n0)) (unify t (arr (s n) eq (s p))))
        (label (-> 'conj 2' + pp_zonked (zonk t) + ' ' + pp_zonked (zonk n0)) (go (arr n eq p))))
    ) where n, p = Var!, Var!
    (label (-> 'disj') (disj base ind)) log solver verbose:verbose
  # (s (s z)) = N?
  log = []
  solver = z3.Solver!
  query = arr (s (s z)) eq n0
  for _ in (go query) log solver =>
    print 'n0 :=' (pp_zonked (zonk n0))
  print!

# appending (potentially infinite) lists
test_app = ->
  # nil ++ XS = XS
  # (X :: XS) ++ YS = (X :: ZS) <== XS ++ YS = ZS
  eq = lit '='
  app = lit '++'
  nil = lit 'nil'
  cons = h t -> arr h (lit '::') t
  xs0 = Var!
  go = t -> log solver verbose:False ->
    base = (unify t (arr nil app xs eq xs) where xs = Var!)
    ind = (
      (conj
        (unify t (arr (cons x xs) app ys eq (cons x zs)))
        (go (arr xs app ys eq zs)))
    ) where x, xs, ys, zs = Var!, Var!, Var!, Var!
    (disj base ind) log solver verbose:verbose
  # ('100 :: ('101 :: nil)) ~ XS
  xs = Var!
  log, _, _ = run (unify (cons 100 (cons 101 nil)) xs)
  print (pp_zonked (zonk xs))
  undo log 0
  print (pp_zonked (zonk xs))
  print!
  # ('100 :: ('101 :: nil)) ++ ('102 :: ('103 :: nil)) = XS
  #xs = Var!
  log = []
  solver = z3.Solver!
  query = arr (cons 100 (cons 101 nil)) app (cons 102 (cons 103 nil)) eq xs0
  for _ in (go query) log solver =>
    print 'xs :=' (pp_zonked (zonk xs0))
  print!
  # XS ~ ('100 :: XS)
  # YS ~ ('100 :: (Z :: YS))
  # ZS ~ YS
  # ----------------------
  # Z ~ 100
  # YS ~ ('100 :: XS)
  xs, ys, z = Var!, Var!, Var!
  print (pp_zonked (zonk xs)) (pp_zonked (zonk ys)) (pp_zonked (zonk z))
  log, _, _ = run (conj
    (unify xs (cons 100 xs))
    (unify ys (cons 100 (cons z ys)))
    (unify xs ys))
  print (pp_zonked (zonk xs)) (pp_zonked (zonk ys)) (pp_zonked (zonk z))
  undo log 0
  print (pp_zonked (zonk xs)) (pp_zonked (zonk ys)) (pp_zonked (zonk z))
  print!
  # XS ~ ('100 :: ('100 :: XS))
  # YS ~ ('100 :: ('100 :: ('100 :: ZS)))
  # ZS ~ ('100 :: YS)
  # XS ~ YS
  xs, ys, zs = Var!, Var!, Var!
  print (pp_zonked (zonk xs)) (pp_zonked (zonk ys)) (pp_zonked (zonk zs))
  log, _, _ = run (conj
    (unify xs (cons 100 (cons 100 xs)))
    (unify ys (cons 100 (cons 100 (cons 100 zs))))
    (unify zs (cons 100 ys))
    (unify xs ys))
  print (pp_zonked (zonk xs)) (pp_zonked (zonk ys)) (pp_zonked (zonk zs))
  undo log 0
  print (pp_zonked (zonk xs)) (pp_zonked (zonk ys)) (pp_zonked (zonk zs))
  print!
  # (98 :: (99 :: nil)) ++ (100 :: (101 :: nil)) = (98 :: XS)
  # ---------------------------------------------------------
  # XS ~ (99 :: (100 :: (101 :: nil)))
  xs = Var!
  print (pp_zonked (zonk xs))
  log, _, _ = run (go
    (arr (cons 98 (cons 99 nil)) app (cons 100 (cons 101 nil)) eq (cons 98 xs)))
  print (pp_zonked (zonk xs))
  undo log 0
  print (pp_zonked (zonk xs))
  print!
  # (100 :: nil) ++ XS = XS
  # -----------------------
  # XS ~ (100 :: XS)
  xs = Var!
  print (pp_zonked (zonk xs))
  log, _, _ = run (go (arr (cons 100 nil) app xs eq xs))
  print (pp_zonked (zonk xs))
  undo log 0
  print (pp_zonked (zonk xs))
  print!

# basic backtracking to find more solutions
test_conj_back = ->
  # q a. q b. r c. r d.
  # p X Y <== q X, r Y.
  go = t -> log solver verbose:False ->
    (label (-> 'disj') (disj
      (label (-> 'disj 1') (unify t (arr (lit 'q') (lit 'a'))))
      (label (-> 'disj 2') (unify t (arr (lit 'q') (lit 'b'))))
      (label (-> 'disj 3') (unify t (arr (lit 'r') (lit 'c'))))
      (label (-> 'disj 4') (unify t (arr (lit 'r') (lit 'd'))))
      (label (-> 'disj 5 = conj') (conj
        (label (-> 'conj 1') (unify t (arr (lit 'p') x y)))
        (label (-> 'conj 2') (go (arr (lit 'q') x)))
        (label (-> 'conj 3') (go (arr (lit 'r') y)))
      ) where x, y = Var!, Var!)
    )) log solver verbose:verbose
  # p X Y ==>
  #   X ~ a, Y = c;
  #   X ~ a, Y = d;
  #   X ~ b, Y = c;
  #   X ~ b, Y = d
  x, y = Var!, Var!
  print (pp_zonked (zonk x)) (pp_zonked (zonk y))
  log = []
  for _ in (go (arr (lit 'p') x y)) log z3.Solver! verbose:False =>
    print (pp_zonked (zonk x)) (pp_zonked (zonk y))
  print (pp_zonked (zonk x)) (pp_zonked (zonk y))
  print!

# constraint solving
test_smt = ->
  # fac 0 = 1.
  # fac {N + 1} = P <== {N >= 0}, {(N + 1) * M = P}, fac N = M.
  go = t -> log solver verbose:False ->
    (disj
      (unify t (arr (lit 'fac') (SMT 0) (lit '=') (SMT 1)))
      ((conj
        (unify t (arr (lit 'fac') (SMT (n.a + 1)) (lit '=') p))
        (add (n.a >= 0))
        (add ((n.a + 1) * m.a == p.a))
        (go (arr (lit 'fac') n (lit '=') m))
      ) where n, m, p = SMT (z3.Int nab!), SMT (z3.Int nab!), SMT (z3.Int nab!))
    ) log solver verbose:verbose
  # fac 100! X
  # ----------
  # {X = 100!}
  x = SMT (z3.Int 'x')
  log = []
  solver = z3.Solver!
  for _ in (go (arr (lit 'fac') (SMT 100) (lit '=') x)) log solver =>
    print solver solver.check! 'x ='
      (if (solver.check! == z3.sat => solver.model! !! x.a) (otherwise => None))
  print solver
  print!
  # fac X 720
  # ---------
  #   X = 7
  x = SMT (z3.Int 'x')
  log = []
  solver = z3.Solver!
  for _ in (go (arr (lit 'fac') x (lit '=') (SMT (720*7)))) log solver =>
    print solver solver.check! 'x ='
      (if (solver.check! == z3.sat => solver.model! !! x.a) (otherwise => None))
  print solver
  print!
  # enumerating all solutions to constraints
  # pythag A B C N <==
  #   {0 < A}, {A <= B}, {B <= C}, {C <= N}
  #   {A^2 + B^2 = C^2}.
  go = t ->
    a, b = SMT (z3.Int nab!), SMT (z3.Int nab!)
    c, n = SMT (z3.Int nab!), SMT (z3.Int nab!)
    conj
      (unify t (arr (lit 'pythag') a b c n))
      (add (0 < a.a) (a.a <= b.a) (b.a <= c.a) (c.a <= n.a) (a.a**2 + b.a**2 == c.a**2))
  a = SMT (z3.Int 'a')
  b = SMT (z3.Int 'b')
  c = SMT (z3.Int 'c')
  log = []
  solver = z3.Solver!
  for _ in (go (arr (lit 'pythag') a b c (SMT 30))) log solver =>
    solver.push!
    while solver.check! == z3.sat =>
      m = solver.model!
      ma, mb, mc = m !! a.a, m !! b.a, m !! c.a
      print 'a =' ma 'b =' mb 'c =' mc
      solver.add (z3.Not (z3.And (a.a == ma) (b.a == mb) (c.a == mc)))
    solver.pop!
  print!
  # cbrt {N * N * N} = N.
  go = t ->
    n = SMT (z3.Int nab!)
    conj (unify t (arr (lit 'cbrt') (SMT (n.a*n.a*n.a)) (lit '=') n))
  n = SMT (z3.Int 'n')
  log = []
  solver = z3.Solver!
  for _ in (go (arr (lit 'cbrt') (SMT (2019*2019*2019)) (lit '=') n)) log solver =>
    solver.push!
    while solver.check! == z3.sat =>
      m = solver.model!
      mn = m !! n.a
      print 'n =' mn
      solver.add (n.a != mn)
    solver.pop!
  print!

test = ->
  test_exhaustive!
  test_app!
  test_conj_back!
  test_smt!

  res = parse '''
    -- Concatenate two lists
    nil ++ XS = XS.
    (X :: XS) ++ YS = (X :: ZS) <== XS ++ YS = ZS.

    -- Map a function over a list
    map _ nil = nil.
    map F (X :: XS) = (Y :: YS) <==
      F X = Y,
      map F XS = YS.
  '''
  print res
  #print (res!!1!!3)
  #print (fact_env (res!!1!!3))
  print!

  print (parse '''
    -- Square root
    sqrt {N * N} = {N}.

    -- Conjunction
    conj {F} {G} <== {F /\\ G}.
    conj {F} {G} <== F, G.

    f {F} {G} <== (F; G), G; F.

    -- Sample query
    p X?
  ''')
  print!

  res = parse '''
    -- Concatenate two lists
    nil ++ XS = XS.
    (X :: XS) ++ YS = (X :: ZS) <== XS ++ YS = ZS.

    -- Sample query
    (1 :: (2 :: nil)) ++ (3 :: (4 :: nil)) = XS?
    (1 :: (2 :: nil)) ++ XS = (1 :: (2 :: (3 :: (4 :: nil))))?

    -- Last element of a list
    last XS = X <== INIT ++ (X :: nil) = XS.

    -- last [1, 2, 3, 4]
    last (1 :: (2 :: (3 :: (4 :: nil)))) = X?
  '''
  print res
  evaluate res

if __name__ == '__main__' =>
  interpret_all = files -> if
    len files > 0 =>
      import '/sys'
      for fname in files =>
        with fd = open fname 'r' =>
          interpret fd.read!
    otherwise =>
      raise NotImplementedError
  import '/argparse'
  parser = argparse.ArgumentParser description:'Stitch'
  parser.add_argument 'files'
    metavar:'FILES'
    type:str
    nargs:'*'
    help:'files to interpret'
  parser.add_argument '--interpret'
    dest:'accumulate'
    action:'store_const'
    const:interpret_all
    help:'interpret the files'
  args = parser.parse_args!
  args.accumulate args.files
